{
  "name": "Umbra",
  "tagline": "Java based 2D game.",
  "body": "## Welcome to Umbra\r\nJava based 2D game. (Animations will be changed in further versions.)\r\n\r\n## Creators:\r\n* Jorge Alberto Niño Cabal.\r\n* Christian Reynaldo López González.\r\n\r\n## Code explanation.\r\nNote for the reader: MC belong to the initials of MainCharacter, and the term “hit points” (hp) is only a synonym for health points of the Characters. Hitbox is also a name for the area in which a character, enemy, hearts or doors can be touched. Also, sprite is the name of the characters, background, hearts ,and doors images.\r\n\r\n## Setters:\r\nThere are several setters so they won’t be explained to the reader, but they all can change the value of instance variables (characteristics) of the characters.\r\n\r\n##  Getters:\r\nThere are several getters so they won’t be explained to the reader, but they all return the value of instance variables (characteristics) of the characters.\r\n\r\n## 1. SUPERCLASS Character:\r\nCharacter is the class that will create the enemies(FinalBoss, and Enemy), and the MainCharacter.\r\n\r\n* Instance variables:\r\n●\tprotected int hp: Defines the life hit points of the characters instantiated in the game.\r\n\r\n●\tprotected String name: Defines the name of the character.\r\n\r\n●\tprotected int power: Defines the damage the character can do.\r\n\r\n●\tprotected int x: Defines the coordinate x of the character.\r\n\r\n●\tprotected int y: Defines the coordinate y of the character.\r\n\r\n●\tprotected int size: Defines the size of the character.\r\n\r\n●\tprotected Rectangle hitbox: Object from the class hitbox defines the area in which a character can be intersected.\r\n\r\n●\tprotected int knockback: Defines the amount of distance that the character is pushed back when attacked.\r\n\r\n* Constructors:\r\n●\tpublic Character(): This method creates an object with default instance variables values.\r\n\r\n●\tpublic Character(int hp, String name, int power, int x, int y, int size, int knocback): This constructor creates an object with given instance variables values. It can give initial: name, hit points, x, y, size, knockback ,and power to the enemies (FinalBoss, and Enemy) and the MC. Also instantiates the hitbox depending\r\n\r\n\r\n\r\n* Methods:\r\n●\tThis class doesn’t uses more methods than the setters and getters.\r\n\r\n## 1.\tSUBCLASS MainCharacter:\r\nMainCharacter defines the Character that the user will control in the program. \r\n\r\n* Instance Variables:\r\n●\tInherits variables from Superclass Character.\r\n\r\n●\tprivate int lives: This variable represents the number of lives the MainCharacter will have.\r\n\r\n●\tprivate boolean gender: This variable will define the gender of the MC, if it is false it will be a male character, and if it’s true it will be a female character.\r\n\r\n●\tprivate Double position: Defines the position where the character is moving (left, right, up, down). Helps us to know when to change the sprite of the MC.\r\n\r\n●\tprivate int pressed: Defines an integer that counts when the user presses an arrow, it counts from 1 to 2 and then restarts. It helps us to know when to change the sprite of the MC.\r\n\r\n●\tprivate boolean attacked: Defines when the MainCharacter is being attacked or not.\r\n\r\n●\tprivate boolean immune: This variable helps us make the Character inmune for 3 seconds (Aprox.) after being attacked.\r\n\r\n●\tprivate int speed: Defines the speed of the character.\r\n* Constructors:\r\n\r\n●\tpublic MainCharacter(): This constructor will create an object with default instance variables values.\r\n\r\n●\tpublic MainCharacter(int hp, String name, int power, int lives, boolean gender, int x, int y, int size): This constructor creates an object with given instance variable values. It will give a starting value for the MainCharacter hitpoints, name, power, lives, gender, x, y, speed ,and size. Also, it will instantiate the hitbox using the super class.\r\n\r\n* Methods:\t\r\n\r\n●\tSetters/Getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method paints the character depending of its gender, if it is attacked, and depending of the direction (position) he is walking to. Also, it will display MC’s life, and his name.\r\n\r\n## 2. SUBCLASS FinalBoss:\r\nThis class defines the most powerful enemy the MC can have, it will have more hit points, more speed, and more power than the other enemies. This enemy have to be defeated so the MC can walk through the door.\r\n\r\n* Instance Variables:\r\n\r\n●\tInherits instance variables from the super class Character.\r\n\r\n●\tprivate Double position: Defines the position in which the boss is standing (Looking to left, right, up, down). Helps us display the correct sprite of the character.\r\n\r\n●\tprivate int direction: Defines the direction to which the boss is walking to. Helps us display the correct sprite of the character.\r\n\r\n●\tprivate int speed: Defines the speed of the Final Boss.\r\n\r\n●\tprivate int move: As the MC variable “pressed” it helps us count the movements of the enemy to display the correct sprite.\r\n\r\n* Constructors:\r\n●\tpublic FinalBoss(): default constructor, gives default values to the instance variables. \r\n\r\n●\tpublic FinalBoss(int hp, Weapon weapon, Double power, Equipment equipment, Room room, String name): This constructor gives initial values to the object created, so the FinalBoss created will have a given hp, name, power, x, y, size, speed, and knockback. Position, direction and move will always have given values. \r\n\r\n* Methods: \r\n●\tSetters and Getters.\r\n\r\n●\tprivate void paint(Graphics g) throws IOException: This method displays the FinalBoss depending of his position. Also, his name will be displayed and his hitpoints bar.\r\n\r\n## 3. SUBCLASS Enemy:\r\nThis class defines the weakest enemy the MC can have, it will have normal hit points, normal power, and normal speed. This enemy should be defeated so the MC can walk through the doors.\r\n\r\n* Instance Variables:\r\n●\tInherits instance variables from the super class Character.\r\n\r\n●\tprivate Double position: Defines the position in which the boss is standing (Looking to left, right, up, down). Helps us display the correct sprite of the character.\r\n\r\n●\tprivate int direction: Defines the direction to which the boss is walking to. Helps us display the correct sprite of the character.\r\n\r\n●\tprivate int speed: Defines the speed of the Final Boss.\r\n\r\n●\tprivate int move: As the MC variable “pressed” it helps us count the movements of the enemy to display the correct sprite.\r\n\r\n* Constructors:\r\n\r\n●\tpublic Enemy(): default constructor, gives default values to the instance variables.\r\n \r\n●\tpublic Enemy(int hp, Weapon weapon, Double power, Equipment equipment, Room room, String name): This constructor gives initial values to the object created, so the Enemy created will have a given hp, name, power, x, y, size, speed, and knockback. Position, direction and move will always have given values. \r\n\r\n* Methods: \r\n●\tSetters and Getters.\r\n\r\n●\tprivate void paint(Graphics g) throws IOException: This method displays the Enemy depending of his position. Also, his name will be displayed and his hitpoints bar.\r\n\r\n## 2. CLASS EnemyRoom:\r\nThis class will represent the room where enemies appear.\r\n\r\n* Instance Variables:\r\n●\tprotected static final long serialVersionUID = 1L: Version of the game.\r\n\r\n●\tprotected BufferedImage img: Defines the image that is displayed using the method paint.\r\n\r\n* Constructors:\r\n●\tpublic Room(): default constructor, gives default values to the instance variables and to the collections.\r\n\t\r\n* Methods:\r\n●\tSetters and getters.\r\n\r\n●\tpublic void paint(Graphics g): Paints the room in which the enemies appear.\r\n\r\n## 3. CLASS TreasureRoom:\r\n\tThis class displays the treasure room that will contain all the treasures that the character can grab.\r\n\r\n* Instance Variables:\r\n\r\n●\tInherits a BufferedImage variable from Room.\r\n\r\n●\tprivate Weapon weapon: Stores the Weapon data value that the MC can grab to improve attack damage. (power)\r\n\r\n* Constructors:\r\n\r\n●\tpublic TreasureRoom(): default constructor, gives default values to the instance variables, in this case the weapon.\r\n\r\n* Methods:\r\n●\tSetters and getters.\r\n\r\n●\tpublic void paint(Graphics g): Paints the room in which the treasures appear, and the weapon.\r\n\t\r\n## 4. CLASS BossRoom:\r\n\r\nThis class will display the background of the room where bosses appear. \r\n\r\n* Instance Variables:\r\n\r\n●\tpublic BufferedImage img: Will open the image that will be displayed in the game. In this case the image is the background of the BossRoom.\r\nConstructors:\r\n\r\n●\tpublic BossRoom(): Default constructor, gives default values to the instance variables. \r\n\tMethods:\r\n●\tSetters and getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method will display the background of the BossRoom.\r\n\r\n## 5. CLASS Door:\r\nThis class is used by the MC to walk from Room to Room, if the room is clear (It will be checked in the Canvas or JPanel) the doors will open, and if the MC touches a door, he will “walk through it” and appear in a new one (Randomly chosen). \r\n\r\n* Instance Variables:\r\n\r\n●\tprivate boolean open: This attribute stores false boolean while there are enemies or treasures in the actual Room.\r\n\r\n●\tprivate int position: Defines the position where the door is standing (left, right, top, bottom). It helps us print the right door depending on the position.\r\n\r\n●\tprivate int x: Defines the x coordinate of the door.\r\n\r\n●\tprivate int y: Defines the y coordinate of the door.\r\n\r\n●\tprivate int height: Defines the height of the door.\r\n\r\n●\tprivate int width: Defines the width of the door.\r\n\r\n●\tprivate Rectangle hitbox: The fines the rectangle that contains the door, if it is touched by the MC and the room is clear, he can walk through it.\r\n\r\n●\tprivate BufferedImage img: Variable that carries the image of the doors.\r\n\r\n\r\n* Constructors:\r\n●\tpublic Door(): Default constructor, gives default values to the instance variables.\r\n\r\n●\tpublic Door(boolean open, int x, int y, int height, int width, int position ): This constructor allows us to give initial values to all the variables.\r\n\r\n●\tpublic Door(int x, int y, int pos): This constructor allows us to make the doors more quickly because they all have the same height and width. It allows us to create objects of this class only by setting a position, an x and an y coordinate.\r\n\r\n* Methods:\r\n\r\n● Setters and getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method paints the doors, depending if they are open or \r\nclose. Also, depending on the position they are declared to. \r\n\r\n## 6. CLASS Weapon:\r\nThis class represents the weapons that can be generated in the game, and it is another item that can be obtained by the MC. It only appears in the treasure room.\r\n\r\n* Instance Variables:\r\n\r\n●\tprivate int atk: This instance variable will hold the attack points that will be increased to the MC if he grabs a Weapon.\r\n●\tprivate String name: This instance variable will hold the name of the weapon instantiated.\r\n\r\n●\tprivate int x: This variable will hold the X coordinate of the weapon.\r\n\r\n●\tprivate int y: This variable will hold the Y coordinate of the weapon.\r\n\r\n●\tprivate int height: This variable will hold the height of the weapon.\r\n\r\n●\tprivate int width: This variable will hold the width of the weapon.\r\n\r\n●\tprivate Rectangle r: This variable will hold the area that surrounds the weapon, if the character touches it, the weapon will cause something on him. \r\n\r\n●\tprivate BufferedImage img:  This variable saves the image of the weapon.\r\n\r\n* Constructors:\r\n\r\n●\tpublic Weapon(): Default constructor, gives default values to the instance variables.\r\n\r\n●\tpublic Weapon(int atk, String name, int x, int y, int height, int width): This constructor will give initial values to the attack, name, x and y coordinates, height and width.\r\n\r\n●\tpublic Weapon(int atk, int x, int y): This constructor helps us create weapon objects easily, by only giving the attack, x and y coordinates.\r\n\r\n* Methods:\r\n\r\n●\tSetters and getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method paints the weapon in the treasure room.\r\n\r\n## 7. CLASS Heart\r\nThis class helps us display a representation of the MC’s lives, and also an object that the MC can grab to get more lives. (MC can’t have more than 5)\r\n\r\n* Instance Variables:\r\n●\tprivate int x: This variable holds the X coordinate of the heart.\r\n\r\n●\tprivate int y: This variable holds the Y coordinate of the heart.\r\n\r\n●\tprivate int size: This variable holds the size of the heart. \r\n\r\n●\tprivate Rectangle newhitbox: This variable will hold the area that surrounds the heart, if the MC touches it the MC can get more lives.\r\n\r\n* Constructors:\r\n\r\n●\tpublic Heart(): Default constructor, gives default values to the instance variables.\r\n\r\n●\tpublic Heart(int x, int y, int size): This constructor allow us to give initial values to the x and y coordinates, and to the size of the hearts.\r\n\r\n* Methods:\r\n\r\n●\tSetters and getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method paints the Heart in the treasure room.\r\n\r\n## 8. CLASS Slash\r\nThis class allows us to display the MC attacks when the user presses SPACEBAR, we made it in a way that we can set the distance of the attack and the velocity.\r\n\r\n* Instance Variables:\r\n●\tprivate int x: This variable holds the X coordinate of the attack effect.\r\n\r\n●\tprivate int y: This variable holds the Y coordinate of the attack effect.\r\n\r\n●\tprivate int size: This variable holds the size of the attack effect. \r\n\r\n●\tprivate int vel: This variable represents the speed of the attack effect.\r\n\r\n●\tprivate int pos: This variable represents the position of the attack effect.\r\n\r\n●\tprivate int sizeAtk: This variable represents the size of the attack effect, how much space it can occupy. \r\n\r\n●\tprivate Rectangle hitBox: Represents the area of the attack, if an enemy is touched by it, his hitpoints will get lower.\r\n\r\n●\tprivate BufferedImage image: This variable holds the image of the attack.\r\nConstructors:\r\n●\tpublic Slash(): Default constructor, gives default values to the instance variables.\r\n\r\n●\tpublic Slash(int x, int y): This constructor allow us to give initial values to the x and y coordinates.\r\n\r\n* Methods:\r\n\r\n●\tSetters and getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method paints the attack when the user presses SPACEBAR and depending on the position of the MC.\r\n\r\n## 9. CLASS Menu\r\nThis class allows us to set an image for the menu/ or for the ending of the game, as we don’t know how to restart the game yet without having to close the Java window, we use it as an ending image, that only is displayed when the MC dies. \r\n\r\n* Instance Variables:\r\n\r\n●\tNo instance variables.\r\n\r\n* Constructors:\r\n\r\n●\tpublic Menu(): Default constructor.\r\n\r\n\tMethods:\r\n\r\n●\tNo setters and getters.\r\n\r\n●\tpublic void paint(Graphics g) throws IOException: This method will paint “YOU DIED” if the MC loses all of his lives. \r\n## 10. CLASS MyCanvas extends JPanel and implements KeyListener and ActionListener.\r\n\r\n* This class represents the game itself, it implements Listener Interfaces that get when the user does something in the game, It has ArrayLists of enemies, doors, lives, and treasures. The ArrayLists holds all the items of the games, except the MC. The Canvas holds counters for then the MC is attacked, and a Timer that repeats the ActionPerformed method each 200 ms. It also carries the starting room, booleans to indicate when to add: doors, enemies, lives, randomLives. Booleans to know when to close and open the doors. Booleans to indicate when the room is clear, counters for the Enemies and Bosses killed. Also, it hold rectangles for the limits of the game window, rectangles for the doors, rectangles for the enemies and for the MC. By the other side it has the rooms and each room is accessed by a number that is random.\r\n\r\n* Instance Variables:\r\n●\tprivate static final long serialVersionUID = 1L: version of the game.\r\n\r\n●\tprivate ArrayList<Character> enemies: Holds all the enemies (Bosses or normal Enemies).\r\n\r\n●\tprotected ArrayList<Door> DoorList: Holds the doors.\r\n\r\n●\tprotected ArrayList<Heart> lives: Holds the Hearts that represents the lives of the MC.\r\n\r\n●\tprotected ArrayList<Heart> treasures: Holds the Hearts that the MC can grab in the treasure room.\r\n\r\n●\tprivate MainCharacter MC: Represents the Main Character.\r\n\r\n●\tprivate Timer time: A timer to repaint the game each 200 ms.\r\n\r\n●\tprivate int Room: Holds the value of the room in which the MC is.\r\n\r\n●\tprivate int counter: Counter used to count 3 seconds when the MC is attacked, it is used to make him immune during that period of time.\r\n\r\n●\tprivate int start: Flag used to start the MC-Attacked counter.\r\n\r\n●\tprivate int EK: Counter of the Enemies Killed.\r\n\r\n●\tprivate int BK: Counter of the Bosses Killed.\r\n\r\n●\tprivate int proPos: Holds the position of the projectile or “the attack” of the MC.\r\n\r\n●\tprivate int roomspassed: Counts the rooms that are passed by the MC, this allow us to make the game harder each time the MC crosses another room.\r\n\r\n●\tprivate boolean addingEnemies, addingDoors, addingLives, proFlag, roomClear, randomLives, pickedItems: This are all boolean flags variables represented by their names.\r\n\r\n●\tprivate Rectangle e, m, top, bot, left, right, rdleft, rdright, rdup, rddown: This are the Rectangle objects that represents the hitbox of the doors, limits, enemies and the MC.\r\n\r\n●\tprivate TreasureRoom room1: Object of the treasure room, that will be setted to room number 1.\r\n\r\n●\tprivate EnemyRoom room2: Object of the EnemyRoom, that will be setted to room number 2.\r\n\r\n●\tprivate BossRoom room3: Object of the BossRoom, that will be setted to room number 3.\r\n\r\n●\tprivate Menu menu: Object of the Menu, it allow us to display when the MC died in this case. (It can be changed) It is setted to number 0.\r\n\r\n●\tprivate Slash pro: Represents the attack/projectile of the MC.\r\n\r\n* Constructors:\r\n● public MyCanvas(): Sets all the instance variables for the project to work correctly, instantiates all the objects, arraylists, booleans, etc. Also it sets the listeners to the Canvas.\r\n\r\n* Methods:\r\n●\tNo setters and getters.\r\n\r\n●\tpublic void addEnemies(int enem, int bosses, boolean boss, boolean ene): Allow us to add Enemies to the room, depending if we want enemies or bosses, and this depends on the Room the MC gets in. Room 2 =  Enemies, Room 3 = Bosses. More appear depending on the number of rooms the MC has passed.\r\n\r\n●\tpublic void enemiesMoving(): Generates the random movement of the enemies.\r\n\r\n●\tpublic void mcAttacked(): Allow us to check if the MC is attacked, if he is attacked his hit points decreases, and if he loses all of his hit points, a life is subtracted from his lives. If he already lost all his lives, he dies and the menu “YOU DIED” is displayed. \r\n\r\n●\tpublic void movProyectil(): Allow us to move the projectile depending on the position of the attack.\r\n\r\n●\tpublic void addDoors(): Generates the doors of the rooms.\r\n\r\n●\tpublic void walkThroughDoor(): When the doors are open, it checks if the MC is intersecting a Door Rectangle, if he is it makes him appear in another randomly generated Room. \r\n\r\n●\tpublic void openDoors(): Opens the doors when the rooms are clear of enemies and treasures.\r\n\r\n●\tpublic void closeDoors(): Closes the doors.\r\n\r\n●\tpublic void isRoomClear(): Checks if the room is clear of enemies and treasures.\r\n\r\n●\tpublic void paint(Graphics g): Paints all the components of the game in the JPanel/Canvas. \r\n\r\n●\tpublic void addLives(): Adds the lives to the MC when he grabs a Heart object, and it also adds the images of the Hearts to the low left of the window. \r\n\r\n●\tpublic void addRandomLives(): When the MC appears in a treasure room this method is called to create random hearts only if the MC has less than 5 lives.\r\n\r\n## Interfaces:\r\n○\tActionListeners:\r\n■\tpublic void ActionPerformed(ActionEvent arg0): This repeats all the methods that checks the game, and it has different functions depending on the room the MC appears in. It can add random items if the MC appears in the Treasure room, and add bosses and/or enemies if the MC appears in EnemyRoom or BossRoom. Also, if the MC dies and goes to room 0 (which displays the “YOU DIED” message, the MC will become null and disappear. Also it checks if the doors should be open, if the MC is attacking, if the MC is attacked, if the enemies are attacked, if the room is clear and the most important, it uses the method that generates the random movement of the enemies. This method has the counter that counts 3 seconds (Aprox.) in which when the character is attacked, he is immune. \r\n○\tKeyListeners:\r\n■\tpublic void KeyPressed(KeyEvent arg0): Does something depending of the keypressed: The space bar is for the attack of the MC and the arrows are for movement. It also helps us determine the position of the MC to change the prite.\r\n■\tpublic void KeyReleased(KeyEvent arg0): When an arrow is released it makes the MC sprite change into a steady position.\r\n■\tpublic void KeyTyped(KeyEvent arg0): Not used.\r\n## 11. CLASS MyWindow extends JFrame\r\nThis class allows us to use the Canvas and display it in the JFrame, it helps us locate the canvas in a BorderLayout and to instantiate the canvas.\r\n\r\n* Instance Variables:\r\n●\tMyCanvas canvas: The canvas with the core of the game.\r\n●\tprivate static final long serialVersionUID: version of the game.\r\nConstructors:\r\n●\tpublic MyWindow(): Instantiates the super class variables to default, instantiates the canvas and adds it to the center of the BorderLayout.\r\n\r\n## 12. Main\r\nThis class allows us to run the program. It instantiates the window with a certain visibility, size and if it is resizable.\r\n\r\n## Specifications of the window:\r\n●\tSize: 500x500.\r\n●\tVisibility: true.\r\n●\tResizable: false.\r\n●\tExits the program on close. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}